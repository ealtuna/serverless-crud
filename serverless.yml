service: members

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/dynamo

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: members
          method: post
          cors: true
  getOne:
    handler: handler.getOne
    events:
      - http:
          path: members/{id}
          method: get
          cors: true
  getAll:
    handler: handler.getAll
    events:
     - http:
         path: members
         method: get
         cors: true
  update:
    handler: handler.update
    events:
     - http:
         path: members/{id}
         method: put
         cors: true
  delete:
    handler: handler.delete
    events:
     - http:
         path: members/{id}
         method: delete
         cors: true

resources:
  Resources:
    MembersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-offline
  - serverless-dynamodb-local
